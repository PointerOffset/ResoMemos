/*
 * api/v1/activity_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CreateResource creates a new resource.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Resource</returns>
        V1Resource ResourceServiceCreateResource(V1Resource resource, int operationIndex = 0);

        /// <summary>
        /// CreateResource creates a new resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Resource</returns>
        ApiResponse<V1Resource> ResourceServiceCreateResourceWithHttpInfo(V1Resource resource, int operationIndex = 0);
        /// <summary>
        /// DeleteResource deletes a resource by name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ResourceServiceDeleteResource(string name3, int operationIndex = 0);

        /// <summary>
        /// DeleteResource deletes a resource by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ResourceServiceDeleteResourceWithHttpInfo(string name3, int operationIndex = 0);
        /// <summary>
        /// GetResource returns a resource by name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Resource</returns>
        V1Resource ResourceServiceGetResource(string name2, int operationIndex = 0);

        /// <summary>
        /// GetResource returns a resource by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Resource</returns>
        ApiResponse<V1Resource> ResourceServiceGetResourceWithHttpInfo(string name2, int operationIndex = 0);
        /// <summary>
        /// GetResourceBinary returns a resource binary by name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiHttpBody</returns>
        ApiHttpBody ResourceServiceGetResourceBinary(string name, string filename, int operationIndex = 0);

        /// <summary>
        /// GetResourceBinary returns a resource binary by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiHttpBody</returns>
        ApiResponse<ApiHttpBody> ResourceServiceGetResourceBinaryWithHttpInfo(string name, string filename, int operationIndex = 0);
        /// <summary>
        /// ListResources lists all resources.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListResourcesResponse</returns>
        V1ListResourcesResponse ResourceServiceListResources(int operationIndex = 0);

        /// <summary>
        /// ListResources lists all resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListResourcesResponse</returns>
        ApiResponse<V1ListResourcesResponse> ResourceServiceListResourcesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// SearchResources searches memos.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1SearchResourcesResponse</returns>
        V1SearchResourcesResponse ResourceServiceSearchResources(string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// SearchResources searches memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1SearchResourcesResponse</returns>
        ApiResponse<V1SearchResourcesResponse> ResourceServiceSearchResourcesWithHttpInfo(string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// UpdateResource updates a resource.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Resource</returns>
        V1Resource ResourceServiceUpdateResource(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0);

        /// <summary>
        /// UpdateResource updates a resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Resource</returns>
        ApiResponse<V1Resource> ResourceServiceUpdateResourceWithHttpInfo(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// CreateResource creates a new resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Resource</returns>
        System.Threading.Tasks.Task<V1Resource> ResourceServiceCreateResourceAsync(V1Resource resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CreateResource creates a new resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Resource>> ResourceServiceCreateResourceWithHttpInfoAsync(V1Resource resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteResource deletes a resource by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ResourceServiceDeleteResourceAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteResource deletes a resource by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResourceServiceDeleteResourceWithHttpInfoAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetResource returns a resource by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Resource</returns>
        System.Threading.Tasks.Task<V1Resource> ResourceServiceGetResourceAsync(string name2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetResource returns a resource by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Resource>> ResourceServiceGetResourceWithHttpInfoAsync(string name2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetResourceBinary returns a resource binary by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiHttpBody</returns>
        System.Threading.Tasks.Task<ApiHttpBody> ResourceServiceGetResourceBinaryAsync(string name, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetResourceBinary returns a resource binary by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiHttpBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiHttpBody>> ResourceServiceGetResourceBinaryWithHttpInfoAsync(string name, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListResources lists all resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListResourcesResponse</returns>
        System.Threading.Tasks.Task<V1ListResourcesResponse> ResourceServiceListResourcesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListResources lists all resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListResourcesResponse>> ResourceServiceListResourcesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// SearchResources searches memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1SearchResourcesResponse</returns>
        System.Threading.Tasks.Task<V1SearchResourcesResponse> ResourceServiceSearchResourcesAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// SearchResources searches memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1SearchResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1SearchResourcesResponse>> ResourceServiceSearchResourcesWithHttpInfoAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UpdateResource updates a resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Resource</returns>
        System.Threading.Tasks.Task<V1Resource> ResourceServiceUpdateResourceAsync(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UpdateResource updates a resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Resource>> ResourceServiceUpdateResourceWithHttpInfoAsync(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceServiceApi : IResourceServiceApiSync, IResourceServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResourceServiceApi : IResourceServiceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourceServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourceServiceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResourceServiceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ResourceServiceApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// CreateResource creates a new resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Resource</returns>
        public V1Resource ResourceServiceCreateResource(V1Resource resource, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Resource> localVarResponse = ResourceServiceCreateResourceWithHttpInfo(resource);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateResource creates a new resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Resource</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Resource> ResourceServiceCreateResourceWithHttpInfo(V1Resource resource, int operationIndex = 0)
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'resource' when calling ResourceServiceApi->ResourceServiceCreateResource");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resource;

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceCreateResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1Resource>("/api/v1/resources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceCreateResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateResource creates a new resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Resource</returns>
        public async System.Threading.Tasks.Task<V1Resource> ResourceServiceCreateResourceAsync(V1Resource resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Resource> localVarResponse = await ResourceServiceCreateResourceWithHttpInfoAsync(resource, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateResource creates a new resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Resource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Resource>> ResourceServiceCreateResourceWithHttpInfoAsync(V1Resource resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'resource' when calling ResourceServiceApi->ResourceServiceCreateResource");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resource;

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceCreateResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<V1Resource>("/api/v1/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceCreateResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteResource deletes a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ResourceServiceDeleteResource(string name3, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ResourceServiceDeleteResourceWithHttpInfo(name3);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteResource deletes a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ResourceServiceDeleteResourceWithHttpInfo(string name3, int operationIndex = 0)
        {
            // verify the required parameter 'name3' is set
            if (name3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name3' when calling ResourceServiceApi->ResourceServiceDeleteResource");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_3", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name3)); // path parameter

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceDeleteResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/{name_3}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceDeleteResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteResource deletes a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ResourceServiceDeleteResourceAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ResourceServiceDeleteResourceWithHttpInfoAsync(name3, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteResource deletes a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ResourceServiceDeleteResourceWithHttpInfoAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name3' is set
            if (name3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name3' when calling ResourceServiceApi->ResourceServiceDeleteResource");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_3", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name3)); // path parameter

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceDeleteResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/{name_3}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceDeleteResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetResource returns a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Resource</returns>
        public V1Resource ResourceServiceGetResource(string name2, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Resource> localVarResponse = ResourceServiceGetResourceWithHttpInfo(name2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetResource returns a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Resource</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Resource> ResourceServiceGetResourceWithHttpInfo(string name2, int operationIndex = 0)
        {
            // verify the required parameter 'name2' is set
            if (name2 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name2' when calling ResourceServiceApi->ResourceServiceGetResource");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_2", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name2)); // path parameter

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceGetResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1Resource>("/api/v1/{name_2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceGetResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetResource returns a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Resource</returns>
        public async System.Threading.Tasks.Task<V1Resource> ResourceServiceGetResourceAsync(string name2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Resource> localVarResponse = await ResourceServiceGetResourceWithHttpInfoAsync(name2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetResource returns a resource by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name2">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Resource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Resource>> ResourceServiceGetResourceWithHttpInfoAsync(string name2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name2' is set
            if (name2 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name2' when calling ResourceServiceApi->ResourceServiceGetResource");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_2", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name2)); // path parameter

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceGetResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1Resource>("/api/v1/{name_2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceGetResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetResourceBinary returns a resource binary by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiHttpBody</returns>
        public ApiHttpBody ResourceServiceGetResourceBinary(string name, string filename, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ApiHttpBody> localVarResponse = ResourceServiceGetResourceBinaryWithHttpInfo(name, filename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetResourceBinary returns a resource binary by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiHttpBody</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApiHttpBody> ResourceServiceGetResourceBinaryWithHttpInfo(string name, string filename, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling ResourceServiceApi->ResourceServiceGetResourceBinary");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filename' when calling ResourceServiceApi->ResourceServiceGetResourceBinary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("filename", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filename)); // path parameter

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceGetResourceBinary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiHttpBody>("/file/{name}/{filename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceGetResourceBinary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetResourceBinary returns a resource binary by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiHttpBody</returns>
        public async System.Threading.Tasks.Task<ApiHttpBody> ResourceServiceGetResourceBinaryAsync(string name, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApiHttpBody> localVarResponse = await ResourceServiceGetResourceBinaryWithHttpInfoAsync(name, filename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetResourceBinary returns a resource binary by name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="filename">The filename of the resource. Mainly used for downloading.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiHttpBody)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApiHttpBody>> ResourceServiceGetResourceBinaryWithHttpInfoAsync(string name, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling ResourceServiceApi->ResourceServiceGetResourceBinary");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filename' when calling ResourceServiceApi->ResourceServiceGetResourceBinary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("filename", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filename)); // path parameter

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceGetResourceBinary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiHttpBody>("/file/{name}/{filename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceGetResourceBinary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListResources lists all resources. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListResourcesResponse</returns>
        public V1ListResourcesResponse ResourceServiceListResources(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListResourcesResponse> localVarResponse = ResourceServiceListResourcesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListResources lists all resources. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListResourcesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListResourcesResponse> ResourceServiceListResourcesWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceListResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListResourcesResponse>("/api/v1/resources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceListResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListResources lists all resources. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListResourcesResponse</returns>
        public async System.Threading.Tasks.Task<V1ListResourcesResponse> ResourceServiceListResourcesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListResourcesResponse> localVarResponse = await ResourceServiceListResourcesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListResources lists all resources. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListResourcesResponse>> ResourceServiceListResourcesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceListResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListResourcesResponse>("/api/v1/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceListResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SearchResources searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1SearchResourcesResponse</returns>
        public V1SearchResourcesResponse ResourceServiceSearchResources(string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1SearchResourcesResponse> localVarResponse = ResourceServiceSearchResourcesWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SearchResources searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1SearchResourcesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1SearchResourcesResponse> ResourceServiceSearchResourcesWithHttpInfo(string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceSearchResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1SearchResourcesResponse>("/api/v1/resources:search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceSearchResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SearchResources searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1SearchResourcesResponse</returns>
        public async System.Threading.Tasks.Task<V1SearchResourcesResponse> ResourceServiceSearchResourcesAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1SearchResourcesResponse> localVarResponse = await ResourceServiceSearchResourcesWithHttpInfoAsync(filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SearchResources searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1SearchResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1SearchResourcesResponse>> ResourceServiceSearchResourcesWithHttpInfoAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceSearchResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1SearchResourcesResponse>("/api/v1/resources:search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceSearchResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateResource updates a resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Resource</returns>
        public V1Resource ResourceServiceUpdateResource(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Resource> localVarResponse = ResourceServiceUpdateResourceWithHttpInfo(resourceName, resource);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateResource updates a resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Resource</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Resource> ResourceServiceUpdateResourceWithHttpInfo(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0)
        {
            // verify the required parameter 'resourceName' is set
            if (resourceName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'resourceName' when calling ResourceServiceApi->ResourceServiceUpdateResource");
            }

            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'resource' when calling ResourceServiceApi->ResourceServiceUpdateResource");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resource.name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(resourceName)); // path parameter
            localVarRequestOptions.Data = resource;

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceUpdateResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<V1Resource>("/api/v1/{resource.name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceUpdateResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateResource updates a resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Resource</returns>
        public async System.Threading.Tasks.Task<V1Resource> ResourceServiceUpdateResourceAsync(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Resource> localVarResponse = await ResourceServiceUpdateResourceWithHttpInfoAsync(resourceName, resource, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateResource updates a resource. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceName">The name of the resource. Format: resources/{id} id is the system generated unique identifier.</param>
        /// <param name="resource"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Resource)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Resource>> ResourceServiceUpdateResourceWithHttpInfoAsync(string resourceName, ResourceServiceUpdateResourceRequest resource, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceName' is set
            if (resourceName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'resourceName' when calling ResourceServiceApi->ResourceServiceUpdateResource");
            }

            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'resource' when calling ResourceServiceApi->ResourceServiceUpdateResource");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resource.name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(resourceName)); // path parameter
            localVarRequestOptions.Data = resource;

            localVarRequestOptions.Operation = "ResourceServiceApi.ResourceServiceUpdateResource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<V1Resource>("/api/v1/{resource.name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceServiceUpdateResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
