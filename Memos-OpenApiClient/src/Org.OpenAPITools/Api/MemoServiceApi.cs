/*
 * api/v1/activity_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CreateMemo creates a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        V1Memo MemoServiceCreateMemo(V1CreateMemoRequest body, int operationIndex = 0);

        /// <summary>
        /// CreateMemo creates a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        ApiResponse<V1Memo> MemoServiceCreateMemoWithHttpInfo(V1CreateMemoRequest body, int operationIndex = 0);
        /// <summary>
        /// CreateMemoComment creates a comment for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        V1Memo MemoServiceCreateMemoComment(string name, V1CreateMemoRequest comment, int operationIndex = 0);

        /// <summary>
        /// CreateMemoComment creates a comment for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        ApiResponse<V1Memo> MemoServiceCreateMemoCommentWithHttpInfo(string name, V1CreateMemoRequest comment, int operationIndex = 0);
        /// <summary>
        /// DeleteMemo deletes a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MemoServiceDeleteMemo(string name4, int operationIndex = 0);

        /// <summary>
        /// DeleteMemo deletes a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MemoServiceDeleteMemoWithHttpInfo(string name4, int operationIndex = 0);
        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MemoServiceDeleteMemoReaction(int reactionId, int operationIndex = 0);

        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MemoServiceDeleteMemoReactionWithHttpInfo(int reactionId, int operationIndex = 0);
        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MemoServiceDeleteMemoTag(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0);

        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MemoServiceDeleteMemoTagWithHttpInfo(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0);
        /// <summary>
        /// ExportMemos exports memos.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ExportMemosResponse</returns>
        V1ExportMemosResponse MemoServiceExportMemos(V1ExportMemosRequest body, int operationIndex = 0);

        /// <summary>
        /// ExportMemos exports memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ExportMemosResponse</returns>
        ApiResponse<V1ExportMemosResponse> MemoServiceExportMemosWithHttpInfo(V1ExportMemosRequest body, int operationIndex = 0);
        /// <summary>
        /// GetMemo gets a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        V1Memo MemoServiceGetMemo(string name3, int operationIndex = 0);

        /// <summary>
        /// GetMemo gets a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        ApiResponse<V1Memo> MemoServiceGetMemoWithHttpInfo(string name3, int operationIndex = 0);
        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1GetUserMemosStatsResponse</returns>
        V1GetUserMemosStatsResponse MemoServiceGetUserMemosStats(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1GetUserMemosStatsResponse</returns>
        ApiResponse<V1GetUserMemosStatsResponse> MemoServiceGetUserMemosStatsWithHttpInfo(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// ListMemoComments lists comments for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoCommentsResponse</returns>
        V1ListMemoCommentsResponse MemoServiceListMemoComments(string name, int operationIndex = 0);

        /// <summary>
        /// ListMemoComments lists comments for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoCommentsResponse</returns>
        ApiResponse<V1ListMemoCommentsResponse> MemoServiceListMemoCommentsWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// ListMemoProperties lists memo properties.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoPropertiesResponse</returns>
        V1ListMemoPropertiesResponse MemoServiceListMemoProperties(string name, int operationIndex = 0);

        /// <summary>
        /// ListMemoProperties lists memo properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoPropertiesResponse</returns>
        ApiResponse<V1ListMemoPropertiesResponse> MemoServiceListMemoPropertiesWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// ListMemoReactions lists reactions for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoReactionsResponse</returns>
        V1ListMemoReactionsResponse MemoServiceListMemoReactions(string name, int operationIndex = 0);

        /// <summary>
        /// ListMemoReactions lists reactions for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoReactionsResponse</returns>
        ApiResponse<V1ListMemoReactionsResponse> MemoServiceListMemoReactionsWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// ListMemoRelations lists relations for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoRelationsResponse</returns>
        V1ListMemoRelationsResponse MemoServiceListMemoRelations(string name, int operationIndex = 0);

        /// <summary>
        /// ListMemoRelations lists relations for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoRelationsResponse</returns>
        ApiResponse<V1ListMemoRelationsResponse> MemoServiceListMemoRelationsWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// ListMemoResources lists resources for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoResourcesResponse</returns>
        V1ListMemoResourcesResponse MemoServiceListMemoResources(string name, int operationIndex = 0);

        /// <summary>
        /// ListMemoResources lists resources for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoResourcesResponse</returns>
        ApiResponse<V1ListMemoResourcesResponse> MemoServiceListMemoResourcesWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// ListMemoTags lists tags for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoTagsResponse</returns>
        V1ListMemoTagsResponse MemoServiceListMemoTags(string parent, string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// ListMemoTags lists tags for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoTagsResponse</returns>
        ApiResponse<V1ListMemoTagsResponse> MemoServiceListMemoTagsWithHttpInfo(string parent, string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// ListMemos lists memos with pagination and filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemosResponse</returns>
        V1ListMemosResponse MemoServiceListMemos(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// ListMemos lists memos with pagination and filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemosResponse</returns>
        ApiResponse<V1ListMemosResponse> MemoServiceListMemosWithHttpInfo(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MemoServiceRebuildMemoProperty(string name, Object body, int operationIndex = 0);

        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MemoServiceRebuildMemoPropertyWithHttpInfo(string name, Object body, int operationIndex = 0);
        /// <summary>
        /// RenameMemoTag renames a tag for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MemoServiceRenameMemoTag(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0);

        /// <summary>
        /// RenameMemoTag renames a tag for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MemoServiceRenameMemoTagWithHttpInfo(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0);
        /// <summary>
        /// SearchMemos searches memos.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1SearchMemosResponse</returns>
        V1SearchMemosResponse MemoServiceSearchMemos(string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// SearchMemos searches memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1SearchMemosResponse</returns>
        ApiResponse<V1SearchMemosResponse> MemoServiceSearchMemosWithHttpInfo(string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// SetMemoRelations sets relations for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MemoServiceSetMemoRelations(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0);

        /// <summary>
        /// SetMemoRelations sets relations for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MemoServiceSetMemoRelationsWithHttpInfo(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0);
        /// <summary>
        /// SetMemoResources sets resources for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MemoServiceSetMemoResources(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0);

        /// <summary>
        /// SetMemoResources sets resources for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MemoServiceSetMemoResourcesWithHttpInfo(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0);
        /// <summary>
        /// UpdateMemo updates a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        V1Memo MemoServiceUpdateMemo(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0);

        /// <summary>
        /// UpdateMemo updates a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        ApiResponse<V1Memo> MemoServiceUpdateMemoWithHttpInfo(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0);
        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Reaction</returns>
        V1Reaction MemoServiceUpsertMemoReaction(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0);

        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Reaction</returns>
        ApiResponse<V1Reaction> MemoServiceUpsertMemoReactionWithHttpInfo(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// CreateMemo creates a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        System.Threading.Tasks.Task<V1Memo> MemoServiceCreateMemoAsync(V1CreateMemoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CreateMemo creates a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Memo>> MemoServiceCreateMemoWithHttpInfoAsync(V1CreateMemoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// CreateMemoComment creates a comment for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        System.Threading.Tasks.Task<V1Memo> MemoServiceCreateMemoCommentAsync(string name, V1CreateMemoRequest comment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CreateMemoComment creates a comment for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Memo>> MemoServiceCreateMemoCommentWithHttpInfoAsync(string name, V1CreateMemoRequest comment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteMemo deletes a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MemoServiceDeleteMemoAsync(string name4, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteMemo deletes a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MemoServiceDeleteMemoWithHttpInfoAsync(string name4, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MemoServiceDeleteMemoReactionAsync(int reactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MemoServiceDeleteMemoReactionWithHttpInfoAsync(int reactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MemoServiceDeleteMemoTagAsync(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MemoServiceDeleteMemoTagWithHttpInfoAsync(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ExportMemos exports memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ExportMemosResponse</returns>
        System.Threading.Tasks.Task<V1ExportMemosResponse> MemoServiceExportMemosAsync(V1ExportMemosRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ExportMemos exports memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ExportMemosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ExportMemosResponse>> MemoServiceExportMemosWithHttpInfoAsync(V1ExportMemosRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetMemo gets a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        System.Threading.Tasks.Task<V1Memo> MemoServiceGetMemoAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetMemo gets a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Memo>> MemoServiceGetMemoWithHttpInfoAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1GetUserMemosStatsResponse</returns>
        System.Threading.Tasks.Task<V1GetUserMemosStatsResponse> MemoServiceGetUserMemosStatsAsync(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1GetUserMemosStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1GetUserMemosStatsResponse>> MemoServiceGetUserMemosStatsWithHttpInfoAsync(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMemoComments lists comments for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoCommentsResponse</returns>
        System.Threading.Tasks.Task<V1ListMemoCommentsResponse> MemoServiceListMemoCommentsAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMemoComments lists comments for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoCommentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListMemoCommentsResponse>> MemoServiceListMemoCommentsWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMemoProperties lists memo properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoPropertiesResponse</returns>
        System.Threading.Tasks.Task<V1ListMemoPropertiesResponse> MemoServiceListMemoPropertiesAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMemoProperties lists memo properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListMemoPropertiesResponse>> MemoServiceListMemoPropertiesWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMemoReactions lists reactions for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoReactionsResponse</returns>
        System.Threading.Tasks.Task<V1ListMemoReactionsResponse> MemoServiceListMemoReactionsAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMemoReactions lists reactions for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoReactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListMemoReactionsResponse>> MemoServiceListMemoReactionsWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMemoRelations lists relations for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoRelationsResponse</returns>
        System.Threading.Tasks.Task<V1ListMemoRelationsResponse> MemoServiceListMemoRelationsAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMemoRelations lists relations for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoRelationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListMemoRelationsResponse>> MemoServiceListMemoRelationsWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMemoResources lists resources for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoResourcesResponse</returns>
        System.Threading.Tasks.Task<V1ListMemoResourcesResponse> MemoServiceListMemoResourcesAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMemoResources lists resources for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListMemoResourcesResponse>> MemoServiceListMemoResourcesWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMemoTags lists tags for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoTagsResponse</returns>
        System.Threading.Tasks.Task<V1ListMemoTagsResponse> MemoServiceListMemoTagsAsync(string parent, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMemoTags lists tags for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoTagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListMemoTagsResponse>> MemoServiceListMemoTagsWithHttpInfoAsync(string parent, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListMemos lists memos with pagination and filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemosResponse</returns>
        System.Threading.Tasks.Task<V1ListMemosResponse> MemoServiceListMemosAsync(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListMemos lists memos with pagination and filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListMemosResponse>> MemoServiceListMemosWithHttpInfoAsync(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MemoServiceRebuildMemoPropertyAsync(string name, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MemoServiceRebuildMemoPropertyWithHttpInfoAsync(string name, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// RenameMemoTag renames a tag for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MemoServiceRenameMemoTagAsync(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// RenameMemoTag renames a tag for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MemoServiceRenameMemoTagWithHttpInfoAsync(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// SearchMemos searches memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1SearchMemosResponse</returns>
        System.Threading.Tasks.Task<V1SearchMemosResponse> MemoServiceSearchMemosAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// SearchMemos searches memos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1SearchMemosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1SearchMemosResponse>> MemoServiceSearchMemosWithHttpInfoAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// SetMemoRelations sets relations for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MemoServiceSetMemoRelationsAsync(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// SetMemoRelations sets relations for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MemoServiceSetMemoRelationsWithHttpInfoAsync(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// SetMemoResources sets resources for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MemoServiceSetMemoResourcesAsync(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// SetMemoResources sets resources for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MemoServiceSetMemoResourcesWithHttpInfoAsync(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UpdateMemo updates a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        System.Threading.Tasks.Task<V1Memo> MemoServiceUpdateMemoAsync(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UpdateMemo updates a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Memo>> MemoServiceUpdateMemoWithHttpInfoAsync(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Reaction</returns>
        System.Threading.Tasks.Task<V1Reaction> MemoServiceUpsertMemoReactionAsync(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Reaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Reaction>> MemoServiceUpsertMemoReactionWithHttpInfoAsync(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoServiceApi : IMemoServiceApiSync, IMemoServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MemoServiceApi : IMemoServiceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemoServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemoServiceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MemoServiceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MemoServiceApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// CreateMemo creates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        public V1Memo MemoServiceCreateMemo(V1CreateMemoRequest body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = MemoServiceCreateMemoWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateMemo creates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Memo> MemoServiceCreateMemoWithHttpInfo(V1CreateMemoRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceCreateMemo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceCreateMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1Memo>("/api/v1/memos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceCreateMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateMemo creates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        public async System.Threading.Tasks.Task<V1Memo> MemoServiceCreateMemoAsync(V1CreateMemoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = await MemoServiceCreateMemoWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateMemo creates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Memo>> MemoServiceCreateMemoWithHttpInfoAsync(V1CreateMemoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceCreateMemo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceCreateMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<V1Memo>("/api/v1/memos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceCreateMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateMemoComment creates a comment for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        public V1Memo MemoServiceCreateMemoComment(string name, V1CreateMemoRequest comment, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = MemoServiceCreateMemoCommentWithHttpInfo(name, comment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateMemoComment creates a comment for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Memo> MemoServiceCreateMemoCommentWithHttpInfo(string name, V1CreateMemoRequest comment, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceCreateMemoComment");
            }

            // verify the required parameter 'comment' is set
            if (comment == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'comment' when calling MemoServiceApi->MemoServiceCreateMemoComment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = comment;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceCreateMemoComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1Memo>("/api/v1/{name}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceCreateMemoComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateMemoComment creates a comment for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        public async System.Threading.Tasks.Task<V1Memo> MemoServiceCreateMemoCommentAsync(string name, V1CreateMemoRequest comment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = await MemoServiceCreateMemoCommentWithHttpInfoAsync(name, comment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateMemoComment creates a comment for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="comment"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Memo>> MemoServiceCreateMemoCommentWithHttpInfoAsync(string name, V1CreateMemoRequest comment, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceCreateMemoComment");
            }

            // verify the required parameter 'comment' is set
            if (comment == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'comment' when calling MemoServiceApi->MemoServiceCreateMemoComment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = comment;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceCreateMemoComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<V1Memo>("/api/v1/{name}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceCreateMemoComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMemo deletes a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MemoServiceDeleteMemo(string name4, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = MemoServiceDeleteMemoWithHttpInfo(name4);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMemo deletes a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> MemoServiceDeleteMemoWithHttpInfo(string name4, int operationIndex = 0)
        {
            // verify the required parameter 'name4' is set
            if (name4 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name4' when calling MemoServiceApi->MemoServiceDeleteMemo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_4", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name4)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceDeleteMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/{name_4}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceDeleteMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMemo deletes a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MemoServiceDeleteMemoAsync(string name4, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await MemoServiceDeleteMemoWithHttpInfoAsync(name4, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMemo deletes a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name4">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> MemoServiceDeleteMemoWithHttpInfoAsync(string name4, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name4' is set
            if (name4 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name4' when calling MemoServiceApi->MemoServiceDeleteMemo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_4", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name4)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceDeleteMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/{name_4}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceDeleteMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MemoServiceDeleteMemoReaction(int reactionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = MemoServiceDeleteMemoReactionWithHttpInfo(reactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> MemoServiceDeleteMemoReactionWithHttpInfo(int reactionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reactionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(reactionId)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceDeleteMemoReaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/reactions/{reactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceDeleteMemoReaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MemoServiceDeleteMemoReactionAsync(int reactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await MemoServiceDeleteMemoReactionWithHttpInfoAsync(reactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMemoReaction deletes a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reactionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> MemoServiceDeleteMemoReactionWithHttpInfoAsync(int reactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reactionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(reactionId)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceDeleteMemoReaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/reactions/{reactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceDeleteMemoReaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MemoServiceDeleteMemoTag(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = MemoServiceDeleteMemoTagWithHttpInfo(parent, tag, deleteRelatedMemos);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> MemoServiceDeleteMemoTagWithHttpInfo(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'parent' when calling MemoServiceApi->MemoServiceDeleteMemoTag");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tag' when calling MemoServiceApi->MemoServiceDeleteMemoTag");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.PathParameters.Add("tag", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (deleteRelatedMemos != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleteRelatedMemos", deleteRelatedMemos));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceDeleteMemoTag";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/{parent}/tags/{tag}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceDeleteMemoTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MemoServiceDeleteMemoTagAsync(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await MemoServiceDeleteMemoTagWithHttpInfoAsync(parent, tag, deleteRelatedMemos, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteMemoTag deletes a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to delete all tags.</param>
        /// <param name="tag"></param>
        /// <param name="deleteRelatedMemos"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> MemoServiceDeleteMemoTagWithHttpInfoAsync(string parent, string tag, bool? deleteRelatedMemos = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'parent' when calling MemoServiceApi->MemoServiceDeleteMemoTag");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tag' when calling MemoServiceApi->MemoServiceDeleteMemoTag");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.PathParameters.Add("tag", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (deleteRelatedMemos != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleteRelatedMemos", deleteRelatedMemos));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceDeleteMemoTag";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/{parent}/tags/{tag}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceDeleteMemoTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ExportMemos exports memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ExportMemosResponse</returns>
        public V1ExportMemosResponse MemoServiceExportMemos(V1ExportMemosRequest body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ExportMemosResponse> localVarResponse = MemoServiceExportMemosWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ExportMemos exports memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ExportMemosResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ExportMemosResponse> MemoServiceExportMemosWithHttpInfo(V1ExportMemosRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceExportMemos");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceExportMemos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1ExportMemosResponse>("/api/v1/memos:export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceExportMemos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ExportMemos exports memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ExportMemosResponse</returns>
        public async System.Threading.Tasks.Task<V1ExportMemosResponse> MemoServiceExportMemosAsync(V1ExportMemosRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ExportMemosResponse> localVarResponse = await MemoServiceExportMemosWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ExportMemos exports memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ExportMemosResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ExportMemosResponse>> MemoServiceExportMemosWithHttpInfoAsync(V1ExportMemosRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceExportMemos");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceExportMemos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<V1ExportMemosResponse>("/api/v1/memos:export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceExportMemos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMemo gets a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        public V1Memo MemoServiceGetMemo(string name3, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = MemoServiceGetMemoWithHttpInfo(name3);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMemo gets a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Memo> MemoServiceGetMemoWithHttpInfo(string name3, int operationIndex = 0)
        {
            // verify the required parameter 'name3' is set
            if (name3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name3' when calling MemoServiceApi->MemoServiceGetMemo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_3", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name3)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceGetMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1Memo>("/api/v1/{name_3}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceGetMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMemo gets a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        public async System.Threading.Tasks.Task<V1Memo> MemoServiceGetMemoAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = await MemoServiceGetMemoWithHttpInfoAsync(name3, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMemo gets a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name3">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Memo>> MemoServiceGetMemoWithHttpInfoAsync(string name3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name3' is set
            if (name3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name3' when calling MemoServiceApi->MemoServiceGetMemo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_3", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name3)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceGetMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1Memo>("/api/v1/{name_3}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceGetMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1GetUserMemosStatsResponse</returns>
        public V1GetUserMemosStatsResponse MemoServiceGetUserMemosStats(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1GetUserMemosStatsResponse> localVarResponse = MemoServiceGetUserMemosStatsWithHttpInfo(name, timezone, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1GetUserMemosStatsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1GetUserMemosStatsResponse> MemoServiceGetUserMemosStatsWithHttpInfo(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceGetUserMemosStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1GetUserMemosStatsResponse>("/api/v1/memos/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceGetUserMemosStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1GetUserMemosStatsResponse</returns>
        public async System.Threading.Tasks.Task<V1GetUserMemosStatsResponse> MemoServiceGetUserMemosStatsAsync(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1GetUserMemosStatsResponse> localVarResponse = await MemoServiceGetUserMemosStatsWithHttpInfoAsync(name, timezone, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetUserMemosStats gets stats of memos for a user. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name is the name of the user to get stats for. Format: users/{id} (optional)</param>
        /// <param name="timezone">timezone location Format: uses tz identifier https://en.wikipedia.org/wiki/List_of_tz_database_time_zones (optional)</param>
        /// <param name="filter">Same as ListMemosRequest.filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1GetUserMemosStatsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1GetUserMemosStatsResponse>> MemoServiceGetUserMemosStatsWithHttpInfoAsync(string? name = default(string?), string? timezone = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceGetUserMemosStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1GetUserMemosStatsResponse>("/api/v1/memos/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceGetUserMemosStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoComments lists comments for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoCommentsResponse</returns>
        public V1ListMemoCommentsResponse MemoServiceListMemoComments(string name, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoCommentsResponse> localVarResponse = MemoServiceListMemoCommentsWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoComments lists comments for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoCommentsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListMemoCommentsResponse> MemoServiceListMemoCommentsWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoComments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoComments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListMemoCommentsResponse>("/api/v1/{name}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoComments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoComments lists comments for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoCommentsResponse</returns>
        public async System.Threading.Tasks.Task<V1ListMemoCommentsResponse> MemoServiceListMemoCommentsAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoCommentsResponse> localVarResponse = await MemoServiceListMemoCommentsWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoComments lists comments for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoCommentsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListMemoCommentsResponse>> MemoServiceListMemoCommentsWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoComments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoComments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListMemoCommentsResponse>("/api/v1/{name}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoComments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoProperties lists memo properties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoPropertiesResponse</returns>
        public V1ListMemoPropertiesResponse MemoServiceListMemoProperties(string name, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoPropertiesResponse> localVarResponse = MemoServiceListMemoPropertiesWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoProperties lists memo properties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoPropertiesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListMemoPropertiesResponse> MemoServiceListMemoPropertiesWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoProperties");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListMemoPropertiesResponse>("/api/v1/{name}/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoProperties lists memo properties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<V1ListMemoPropertiesResponse> MemoServiceListMemoPropertiesAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoPropertiesResponse> localVarResponse = await MemoServiceListMemoPropertiesWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoProperties lists memo properties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all properties.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListMemoPropertiesResponse>> MemoServiceListMemoPropertiesWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoProperties");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListMemoPropertiesResponse>("/api/v1/{name}/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoReactions lists reactions for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoReactionsResponse</returns>
        public V1ListMemoReactionsResponse MemoServiceListMemoReactions(string name, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoReactionsResponse> localVarResponse = MemoServiceListMemoReactionsWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoReactions lists reactions for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoReactionsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListMemoReactionsResponse> MemoServiceListMemoReactionsWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoReactions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoReactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListMemoReactionsResponse>("/api/v1/{name}/reactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoReactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoReactions lists reactions for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoReactionsResponse</returns>
        public async System.Threading.Tasks.Task<V1ListMemoReactionsResponse> MemoServiceListMemoReactionsAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoReactionsResponse> localVarResponse = await MemoServiceListMemoReactionsWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoReactions lists reactions for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoReactionsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListMemoReactionsResponse>> MemoServiceListMemoReactionsWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoReactions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoReactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListMemoReactionsResponse>("/api/v1/{name}/reactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoReactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoRelations lists relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoRelationsResponse</returns>
        public V1ListMemoRelationsResponse MemoServiceListMemoRelations(string name, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoRelationsResponse> localVarResponse = MemoServiceListMemoRelationsWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoRelations lists relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoRelationsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListMemoRelationsResponse> MemoServiceListMemoRelationsWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoRelations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoRelations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListMemoRelationsResponse>("/api/v1/{name}/relations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoRelations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoRelations lists relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoRelationsResponse</returns>
        public async System.Threading.Tasks.Task<V1ListMemoRelationsResponse> MemoServiceListMemoRelationsAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoRelationsResponse> localVarResponse = await MemoServiceListMemoRelationsWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoRelations lists relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoRelationsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListMemoRelationsResponse>> MemoServiceListMemoRelationsWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoRelations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoRelations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListMemoRelationsResponse>("/api/v1/{name}/relations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoRelations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoResources lists resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoResourcesResponse</returns>
        public V1ListMemoResourcesResponse MemoServiceListMemoResources(string name, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoResourcesResponse> localVarResponse = MemoServiceListMemoResourcesWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoResources lists resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoResourcesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListMemoResourcesResponse> MemoServiceListMemoResourcesWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoResources");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListMemoResourcesResponse>("/api/v1/{name}/resources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoResources lists resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoResourcesResponse</returns>
        public async System.Threading.Tasks.Task<V1ListMemoResourcesResponse> MemoServiceListMemoResourcesAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoResourcesResponse> localVarResponse = await MemoServiceListMemoResourcesWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoResources lists resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListMemoResourcesResponse>> MemoServiceListMemoResourcesWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceListMemoResources");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListMemoResourcesResponse>("/api/v1/{name}/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoTags lists tags for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemoTagsResponse</returns>
        public V1ListMemoTagsResponse MemoServiceListMemoTags(string parent, string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoTagsResponse> localVarResponse = MemoServiceListMemoTagsWithHttpInfo(parent, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoTags lists tags for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemoTagsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListMemoTagsResponse> MemoServiceListMemoTagsWithHttpInfo(string parent, string? filter = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'parent' when calling MemoServiceApi->MemoServiceListMemoTags");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parent)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoTags";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListMemoTagsResponse>("/api/v1/{parent}/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemoTags lists tags for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemoTagsResponse</returns>
        public async System.Threading.Tasks.Task<V1ListMemoTagsResponse> MemoServiceListMemoTagsAsync(string parent, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemoTagsResponse> localVarResponse = await MemoServiceListMemoTagsWithHttpInfoAsync(parent, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemoTags lists tags for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to list all tags.</param>
        /// <param name="filter">Filter is used to filter memos. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemoTagsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListMemoTagsResponse>> MemoServiceListMemoTagsWithHttpInfoAsync(string parent, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'parent' when calling MemoServiceApi->MemoServiceListMemoTags");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parent)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemoTags";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListMemoTagsResponse>("/api/v1/{parent}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemoTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemos lists memos with pagination and filter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListMemosResponse</returns>
        public V1ListMemosResponse MemoServiceListMemos(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemosResponse> localVarResponse = MemoServiceListMemosWithHttpInfo(pageSize, pageToken, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemos lists memos with pagination and filter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListMemosResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListMemosResponse> MemoServiceListMemosWithHttpInfo(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListMemosResponse>("/api/v1/memos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListMemos lists memos with pagination and filter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListMemosResponse</returns>
        public async System.Threading.Tasks.Task<V1ListMemosResponse> MemoServiceListMemosAsync(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListMemosResponse> localVarResponse = await MemoServiceListMemosWithHttpInfoAsync(pageSize, pageToken, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListMemos lists memos with pagination and filter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The maximum number of memos to return. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous &#x60;ListMemos&#x60; call. Provide this to retrieve the subsequent page. (optional)</param>
        /// <param name="filter">Filter is used to filter memos returned in the list. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListMemosResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListMemosResponse>> MemoServiceListMemosWithHttpInfoAsync(int? pageSize = default(int?), string? pageToken = default(string?), string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceListMemos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListMemosResponse>("/api/v1/memos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceListMemos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MemoServiceRebuildMemoProperty(string name, Object body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = MemoServiceRebuildMemoPropertyWithHttpInfo(name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> MemoServiceRebuildMemoPropertyWithHttpInfo(string name, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceRebuildMemoProperty");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceRebuildMemoProperty");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceRebuildMemoProperty";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/{name}/properties:rebuild", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceRebuildMemoProperty", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MemoServiceRebuildMemoPropertyAsync(string name, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await MemoServiceRebuildMemoPropertyWithHttpInfoAsync(name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RebuildMemoProperty rebuilds a memo property. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}. Use \&quot;memos/-\&quot; to rebuild all memos.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> MemoServiceRebuildMemoPropertyWithHttpInfoAsync(string name, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceRebuildMemoProperty");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceRebuildMemoProperty");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceRebuildMemoProperty";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/{name}/properties:rebuild", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceRebuildMemoProperty", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RenameMemoTag renames a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MemoServiceRenameMemoTag(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = MemoServiceRenameMemoTagWithHttpInfo(parent, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RenameMemoTag renames a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> MemoServiceRenameMemoTagWithHttpInfo(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0)
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'parent' when calling MemoServiceApi->MemoServiceRenameMemoTag");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceRenameMemoTag");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceRenameMemoTag";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/{parent}/tags:rename", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceRenameMemoTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RenameMemoTag renames a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MemoServiceRenameMemoTagAsync(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await MemoServiceRenameMemoTagWithHttpInfoAsync(parent, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RenameMemoTag renames a tag for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">The parent, who owns the tags. Format: memos/{id}. Use \&quot;memos/-\&quot; to rename all tags.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> MemoServiceRenameMemoTagWithHttpInfoAsync(string parent, MemoServiceRenameMemoTagBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parent' is set
            if (parent == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'parent' when calling MemoServiceApi->MemoServiceRenameMemoTag");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceRenameMemoTag");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parent)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceRenameMemoTag";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/v1/{parent}/tags:rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceRenameMemoTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SearchMemos searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1SearchMemosResponse</returns>
        public V1SearchMemosResponse MemoServiceSearchMemos(string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1SearchMemosResponse> localVarResponse = MemoServiceSearchMemosWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SearchMemos searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1SearchMemosResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1SearchMemosResponse> MemoServiceSearchMemosWithHttpInfo(string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceSearchMemos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1SearchMemosResponse>("/api/v1/memos:search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceSearchMemos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SearchMemos searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1SearchMemosResponse</returns>
        public async System.Threading.Tasks.Task<V1SearchMemosResponse> MemoServiceSearchMemosAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1SearchMemosResponse> localVarResponse = await MemoServiceSearchMemosWithHttpInfoAsync(filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SearchMemos searches memos. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter is used to filter memos returned. Format: \&quot;creator &#x3D;&#x3D; &#39;users/{uid}&#39; &amp;&amp; visibilities &#x3D;&#x3D; [&#39;PUBLIC&#39;, &#39;PROTECTED&#39;]\&quot; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1SearchMemosResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1SearchMemosResponse>> MemoServiceSearchMemosWithHttpInfoAsync(string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceSearchMemos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1SearchMemosResponse>("/api/v1/memos:search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceSearchMemos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SetMemoRelations sets relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MemoServiceSetMemoRelations(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = MemoServiceSetMemoRelationsWithHttpInfo(name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SetMemoRelations sets relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> MemoServiceSetMemoRelationsWithHttpInfo(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceSetMemoRelations");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceSetMemoRelations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceSetMemoRelations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/{name}/relations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceSetMemoRelations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SetMemoRelations sets relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MemoServiceSetMemoRelationsAsync(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await MemoServiceSetMemoRelationsWithHttpInfoAsync(name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SetMemoRelations sets relations for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> MemoServiceSetMemoRelationsWithHttpInfoAsync(string name, MemoServiceSetMemoRelationsBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceSetMemoRelations");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceSetMemoRelations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceSetMemoRelations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/v1/{name}/relations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceSetMemoRelations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SetMemoResources sets resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MemoServiceSetMemoResources(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = MemoServiceSetMemoResourcesWithHttpInfo(name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SetMemoResources sets resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> MemoServiceSetMemoResourcesWithHttpInfo(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceSetMemoResources");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceSetMemoResources");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceSetMemoResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/{name}/resources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceSetMemoResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// SetMemoResources sets resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MemoServiceSetMemoResourcesAsync(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await MemoServiceSetMemoResourcesWithHttpInfoAsync(name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SetMemoResources sets resources for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> MemoServiceSetMemoResourcesWithHttpInfoAsync(string name, MemoServiceSetMemoResourcesBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceSetMemoResources");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceSetMemoResources");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceSetMemoResources";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/v1/{name}/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceSetMemoResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateMemo updates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Memo</returns>
        public V1Memo MemoServiceUpdateMemo(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = MemoServiceUpdateMemoWithHttpInfo(memoName, memo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateMemo updates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Memo</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Memo> MemoServiceUpdateMemoWithHttpInfo(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0)
        {
            // verify the required parameter 'memoName' is set
            if (memoName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'memoName' when calling MemoServiceApi->MemoServiceUpdateMemo");
            }

            // verify the required parameter 'memo' is set
            if (memo == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'memo' when calling MemoServiceApi->MemoServiceUpdateMemo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memo.name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(memoName)); // path parameter
            localVarRequestOptions.Data = memo;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceUpdateMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<V1Memo>("/api/v1/{memo.name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceUpdateMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateMemo updates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Memo</returns>
        public async System.Threading.Tasks.Task<V1Memo> MemoServiceUpdateMemoAsync(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Memo> localVarResponse = await MemoServiceUpdateMemoWithHttpInfoAsync(memoName, memo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateMemo updates a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoName">The name of the memo. Format: memos/{id} id is the system generated id.</param>
        /// <param name="memo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Memo)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Memo>> MemoServiceUpdateMemoWithHttpInfoAsync(string memoName, MemoServiceUpdateMemoRequest memo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memoName' is set
            if (memoName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'memoName' when calling MemoServiceApi->MemoServiceUpdateMemo");
            }

            // verify the required parameter 'memo' is set
            if (memo == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'memo' when calling MemoServiceApi->MemoServiceUpdateMemo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memo.name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(memoName)); // path parameter
            localVarRequestOptions.Data = memo;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceUpdateMemo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<V1Memo>("/api/v1/{memo.name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceUpdateMemo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1Reaction</returns>
        public V1Reaction MemoServiceUpsertMemoReaction(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1Reaction> localVarResponse = MemoServiceUpsertMemoReactionWithHttpInfo(name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1Reaction</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1Reaction> MemoServiceUpsertMemoReactionWithHttpInfo(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceUpsertMemoReaction");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceUpsertMemoReaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceUpsertMemoReaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1Reaction>("/api/v1/{name}/reactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceUpsertMemoReaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1Reaction</returns>
        public async System.Threading.Tasks.Task<V1Reaction> MemoServiceUpsertMemoReactionAsync(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1Reaction> localVarResponse = await MemoServiceUpsertMemoReactionWithHttpInfoAsync(name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpsertMemoReaction upserts a reaction for a memo. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the memo. Format: memos/{id}</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1Reaction)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1Reaction>> MemoServiceUpsertMemoReactionWithHttpInfoAsync(string name, MemoServiceUpsertMemoReactionBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling MemoServiceApi->MemoServiceUpsertMemoReaction");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling MemoServiceApi->MemoServiceUpsertMemoReaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoServiceApi.MemoServiceUpsertMemoReaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<V1Reaction>("/api/v1/{name}/reactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MemoServiceUpsertMemoReaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
