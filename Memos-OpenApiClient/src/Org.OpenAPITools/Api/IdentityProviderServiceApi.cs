/*
 * api/v1/activity_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityProviderServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CreateIdentityProvider creates an identity provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Apiv1IdentityProvider</returns>
        Apiv1IdentityProvider IdentityProviderServiceCreateIdentityProvider(Apiv1IdentityProvider identityProvider, int operationIndex = 0);

        /// <summary>
        /// CreateIdentityProvider creates an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Apiv1IdentityProvider</returns>
        ApiResponse<Apiv1IdentityProvider> IdentityProviderServiceCreateIdentityProviderWithHttpInfo(Apiv1IdentityProvider identityProvider, int operationIndex = 0);
        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object IdentityProviderServiceDeleteIdentityProvider(string name1, int operationIndex = 0);

        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IdentityProviderServiceDeleteIdentityProviderWithHttpInfo(string name1, int operationIndex = 0);
        /// <summary>
        /// GetIdentityProvider gets an identity provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Apiv1IdentityProvider</returns>
        Apiv1IdentityProvider IdentityProviderServiceGetIdentityProvider(string name1, int operationIndex = 0);

        /// <summary>
        /// GetIdentityProvider gets an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Apiv1IdentityProvider</returns>
        ApiResponse<Apiv1IdentityProvider> IdentityProviderServiceGetIdentityProviderWithHttpInfo(string name1, int operationIndex = 0);
        /// <summary>
        /// ListIdentityProviders lists identity providers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListIdentityProvidersResponse</returns>
        V1ListIdentityProvidersResponse IdentityProviderServiceListIdentityProviders(int operationIndex = 0);

        /// <summary>
        /// ListIdentityProviders lists identity providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListIdentityProvidersResponse</returns>
        ApiResponse<V1ListIdentityProvidersResponse> IdentityProviderServiceListIdentityProvidersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// UpdateIdentityProvider updates an identity provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Apiv1IdentityProvider</returns>
        Apiv1IdentityProvider IdentityProviderServiceUpdateIdentityProvider(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0);

        /// <summary>
        /// UpdateIdentityProvider updates an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Apiv1IdentityProvider</returns>
        ApiResponse<Apiv1IdentityProvider> IdentityProviderServiceUpdateIdentityProviderWithHttpInfo(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityProviderServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// CreateIdentityProvider creates an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apiv1IdentityProvider</returns>
        System.Threading.Tasks.Task<Apiv1IdentityProvider> IdentityProviderServiceCreateIdentityProviderAsync(Apiv1IdentityProvider identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CreateIdentityProvider creates an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apiv1IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<Apiv1IdentityProvider>> IdentityProviderServiceCreateIdentityProviderWithHttpInfoAsync(Apiv1IdentityProvider identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IdentityProviderServiceDeleteIdentityProviderAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IdentityProviderServiceDeleteIdentityProviderWithHttpInfoAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetIdentityProvider gets an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apiv1IdentityProvider</returns>
        System.Threading.Tasks.Task<Apiv1IdentityProvider> IdentityProviderServiceGetIdentityProviderAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetIdentityProvider gets an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apiv1IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<Apiv1IdentityProvider>> IdentityProviderServiceGetIdentityProviderWithHttpInfoAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ListIdentityProviders lists identity providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListIdentityProvidersResponse</returns>
        System.Threading.Tasks.Task<V1ListIdentityProvidersResponse> IdentityProviderServiceListIdentityProvidersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ListIdentityProviders lists identity providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListIdentityProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ListIdentityProvidersResponse>> IdentityProviderServiceListIdentityProvidersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UpdateIdentityProvider updates an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apiv1IdentityProvider</returns>
        System.Threading.Tasks.Task<Apiv1IdentityProvider> IdentityProviderServiceUpdateIdentityProviderAsync(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UpdateIdentityProvider updates an identity provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apiv1IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<Apiv1IdentityProvider>> IdentityProviderServiceUpdateIdentityProviderWithHttpInfoAsync(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityProviderServiceApi : IIdentityProviderServiceApiSync, IIdentityProviderServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentityProviderServiceApi : IIdentityProviderServiceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentityProviderServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentityProviderServiceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentityProviderServiceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IdentityProviderServiceApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// CreateIdentityProvider creates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Apiv1IdentityProvider</returns>
        public Apiv1IdentityProvider IdentityProviderServiceCreateIdentityProvider(Apiv1IdentityProvider identityProvider, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> localVarResponse = IdentityProviderServiceCreateIdentityProviderWithHttpInfo(identityProvider);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateIdentityProvider creates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Apiv1IdentityProvider</returns>
        public Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> IdentityProviderServiceCreateIdentityProviderWithHttpInfo(Apiv1IdentityProvider identityProvider, int operationIndex = 0)
        {
            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderServiceApi->IdentityProviderServiceCreateIdentityProvider");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identityProvider;

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceCreateIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Apiv1IdentityProvider>("/api/v1/identityProviders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceCreateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateIdentityProvider creates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apiv1IdentityProvider</returns>
        public async System.Threading.Tasks.Task<Apiv1IdentityProvider> IdentityProviderServiceCreateIdentityProviderAsync(Apiv1IdentityProvider identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> localVarResponse = await IdentityProviderServiceCreateIdentityProviderWithHttpInfoAsync(identityProvider, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateIdentityProvider creates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider">The identityProvider to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apiv1IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider>> IdentityProviderServiceCreateIdentityProviderWithHttpInfoAsync(Apiv1IdentityProvider identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderServiceApi->IdentityProviderServiceCreateIdentityProvider");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identityProvider;

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceCreateIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Apiv1IdentityProvider>("/api/v1/identityProviders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceCreateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object IdentityProviderServiceDeleteIdentityProvider(string name1, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = IdentityProviderServiceDeleteIdentityProviderWithHttpInfo(name1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> IdentityProviderServiceDeleteIdentityProviderWithHttpInfo(string name1, int operationIndex = 0)
        {
            // verify the required parameter 'name1' is set
            if (name1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name1' when calling IdentityProviderServiceApi->IdentityProviderServiceDeleteIdentityProvider");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name1)); // path parameter

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceDeleteIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/{name_1}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceDeleteIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IdentityProviderServiceDeleteIdentityProviderAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await IdentityProviderServiceDeleteIdentityProviderWithHttpInfoAsync(name1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteIdentityProvider deletes an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to delete. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> IdentityProviderServiceDeleteIdentityProviderWithHttpInfoAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name1' is set
            if (name1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name1' when calling IdentityProviderServiceApi->IdentityProviderServiceDeleteIdentityProvider");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name1)); // path parameter

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceDeleteIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/{name_1}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceDeleteIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetIdentityProvider gets an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Apiv1IdentityProvider</returns>
        public Apiv1IdentityProvider IdentityProviderServiceGetIdentityProvider(string name1, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> localVarResponse = IdentityProviderServiceGetIdentityProviderWithHttpInfo(name1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetIdentityProvider gets an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Apiv1IdentityProvider</returns>
        public Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> IdentityProviderServiceGetIdentityProviderWithHttpInfo(string name1, int operationIndex = 0)
        {
            // verify the required parameter 'name1' is set
            if (name1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name1' when calling IdentityProviderServiceApi->IdentityProviderServiceGetIdentityProvider");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name1)); // path parameter

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceGetIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Apiv1IdentityProvider>("/api/v1/{name_1}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceGetIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetIdentityProvider gets an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apiv1IdentityProvider</returns>
        public async System.Threading.Tasks.Task<Apiv1IdentityProvider> IdentityProviderServiceGetIdentityProviderAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> localVarResponse = await IdentityProviderServiceGetIdentityProviderWithHttpInfoAsync(name1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetIdentityProvider gets an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name1">The name of the identityProvider to get. Format: identityProviders/{id}</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apiv1IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider>> IdentityProviderServiceGetIdentityProviderWithHttpInfoAsync(string name1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name1' is set
            if (name1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name1' when calling IdentityProviderServiceApi->IdentityProviderServiceGetIdentityProvider");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name_1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(name1)); // path parameter

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceGetIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Apiv1IdentityProvider>("/api/v1/{name_1}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceGetIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListIdentityProviders lists identity providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V1ListIdentityProvidersResponse</returns>
        public V1ListIdentityProvidersResponse IdentityProviderServiceListIdentityProviders(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListIdentityProvidersResponse> localVarResponse = IdentityProviderServiceListIdentityProvidersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListIdentityProviders lists identity providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V1ListIdentityProvidersResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<V1ListIdentityProvidersResponse> IdentityProviderServiceListIdentityProvidersWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceListIdentityProviders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V1ListIdentityProvidersResponse>("/api/v1/identityProviders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceListIdentityProviders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListIdentityProviders lists identity providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1ListIdentityProvidersResponse</returns>
        public async System.Threading.Tasks.Task<V1ListIdentityProvidersResponse> IdentityProviderServiceListIdentityProvidersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<V1ListIdentityProvidersResponse> localVarResponse = await IdentityProviderServiceListIdentityProvidersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListIdentityProviders lists identity providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1ListIdentityProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<V1ListIdentityProvidersResponse>> IdentityProviderServiceListIdentityProvidersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceListIdentityProviders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V1ListIdentityProvidersResponse>("/api/v1/identityProviders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceListIdentityProviders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateIdentityProvider updates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Apiv1IdentityProvider</returns>
        public Apiv1IdentityProvider IdentityProviderServiceUpdateIdentityProvider(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> localVarResponse = IdentityProviderServiceUpdateIdentityProviderWithHttpInfo(identityProviderName, identityProvider);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateIdentityProvider updates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Apiv1IdentityProvider</returns>
        public Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> IdentityProviderServiceUpdateIdentityProviderWithHttpInfo(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0)
        {
            // verify the required parameter 'identityProviderName' is set
            if (identityProviderName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityProviderName' when calling IdentityProviderServiceApi->IdentityProviderServiceUpdateIdentityProvider");
            }

            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderServiceApi->IdentityProviderServiceUpdateIdentityProvider");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("identityProvider.name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(identityProviderName)); // path parameter
            localVarRequestOptions.Data = identityProvider;

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceUpdateIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Apiv1IdentityProvider>("/api/v1/{identityProvider.name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceUpdateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateIdentityProvider updates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apiv1IdentityProvider</returns>
        public async System.Threading.Tasks.Task<Apiv1IdentityProvider> IdentityProviderServiceUpdateIdentityProviderAsync(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider> localVarResponse = await IdentityProviderServiceUpdateIdentityProviderWithHttpInfoAsync(identityProviderName, identityProvider, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateIdentityProvider updates an identity provider. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProviderName">The name of the identityProvider. Format: identityProviders/{id}</param>
        /// <param name="identityProvider">The identityProvider to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apiv1IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Apiv1IdentityProvider>> IdentityProviderServiceUpdateIdentityProviderWithHttpInfoAsync(string identityProviderName, TheIdentityProviderToUpdate identityProvider, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identityProviderName' is set
            if (identityProviderName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityProviderName' when calling IdentityProviderServiceApi->IdentityProviderServiceUpdateIdentityProvider");
            }

            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderServiceApi->IdentityProviderServiceUpdateIdentityProvider");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("identityProvider.name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(identityProviderName)); // path parameter
            localVarRequestOptions.Data = identityProvider;

            localVarRequestOptions.Operation = "IdentityProviderServiceApi.IdentityProviderServiceUpdateIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Apiv1IdentityProvider>("/api/v1/{identityProvider.name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityProviderServiceUpdateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
