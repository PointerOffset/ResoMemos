/*
 * api/v1/activity_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// V1Node
    /// </summary>
    [DataContract(Name = "v1Node")]
    public partial class V1Node : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public V1NodeType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Node" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="lineBreakNode">lineBreakNode.</param>
        /// <param name="paragraphNode">paragraphNode.</param>
        /// <param name="codeBlockNode">codeBlockNode.</param>
        /// <param name="headingNode">headingNode.</param>
        /// <param name="horizontalRuleNode">horizontalRuleNode.</param>
        /// <param name="blockquoteNode">blockquoteNode.</param>
        /// <param name="orderedListNode">orderedListNode.</param>
        /// <param name="unorderedListNode">unorderedListNode.</param>
        /// <param name="taskListNode">taskListNode.</param>
        /// <param name="mathBlockNode">mathBlockNode.</param>
        /// <param name="tableNode">tableNode.</param>
        /// <param name="embeddedContentNode">embeddedContentNode.</param>
        /// <param name="textNode">textNode.</param>
        /// <param name="boldNode">boldNode.</param>
        /// <param name="italicNode">italicNode.</param>
        /// <param name="boldItalicNode">boldItalicNode.</param>
        /// <param name="codeNode">codeNode.</param>
        /// <param name="imageNode">imageNode.</param>
        /// <param name="linkNode">linkNode.</param>
        /// <param name="autoLinkNode">autoLinkNode.</param>
        /// <param name="tagNode">tagNode.</param>
        /// <param name="strikethroughNode">strikethroughNode.</param>
        /// <param name="escapingCharacterNode">escapingCharacterNode.</param>
        /// <param name="mathNode">mathNode.</param>
        /// <param name="highlightNode">highlightNode.</param>
        /// <param name="subscriptNode">subscriptNode.</param>
        /// <param name="superscriptNode">superscriptNode.</param>
        /// <param name="referencedContentNode">referencedContentNode.</param>
        /// <param name="spoilerNode">spoilerNode.</param>
        public V1Node(V1NodeType? type = default(V1NodeType?), Object lineBreakNode = default(Object), V1ParagraphNode paragraphNode = default(V1ParagraphNode), V1CodeBlockNode codeBlockNode = default(V1CodeBlockNode), V1HeadingNode headingNode = default(V1HeadingNode), V1HorizontalRuleNode horizontalRuleNode = default(V1HorizontalRuleNode), V1BlockquoteNode blockquoteNode = default(V1BlockquoteNode), V1OrderedListNode orderedListNode = default(V1OrderedListNode), V1UnorderedListNode unorderedListNode = default(V1UnorderedListNode), V1TaskListNode taskListNode = default(V1TaskListNode), V1MathBlockNode mathBlockNode = default(V1MathBlockNode), V1TableNode tableNode = default(V1TableNode), V1EmbeddedContentNode embeddedContentNode = default(V1EmbeddedContentNode), V1TextNode textNode = default(V1TextNode), V1BoldNode boldNode = default(V1BoldNode), V1ItalicNode italicNode = default(V1ItalicNode), V1BoldItalicNode boldItalicNode = default(V1BoldItalicNode), V1CodeNode codeNode = default(V1CodeNode), V1ImageNode imageNode = default(V1ImageNode), V1LinkNode linkNode = default(V1LinkNode), V1AutoLinkNode autoLinkNode = default(V1AutoLinkNode), V1TagNode tagNode = default(V1TagNode), V1StrikethroughNode strikethroughNode = default(V1StrikethroughNode), V1EscapingCharacterNode escapingCharacterNode = default(V1EscapingCharacterNode), V1MathNode mathNode = default(V1MathNode), V1HighlightNode highlightNode = default(V1HighlightNode), V1SubscriptNode subscriptNode = default(V1SubscriptNode), V1SuperscriptNode superscriptNode = default(V1SuperscriptNode), V1ReferencedContentNode referencedContentNode = default(V1ReferencedContentNode), V1SpoilerNode spoilerNode = default(V1SpoilerNode))
        {
            this.Type = type;
            this.LineBreakNode = lineBreakNode;
            this.ParagraphNode = paragraphNode;
            this.CodeBlockNode = codeBlockNode;
            this.HeadingNode = headingNode;
            this.HorizontalRuleNode = horizontalRuleNode;
            this.BlockquoteNode = blockquoteNode;
            this.OrderedListNode = orderedListNode;
            this.UnorderedListNode = unorderedListNode;
            this.TaskListNode = taskListNode;
            this.MathBlockNode = mathBlockNode;
            this.TableNode = tableNode;
            this.EmbeddedContentNode = embeddedContentNode;
            this.TextNode = textNode;
            this.BoldNode = boldNode;
            this.ItalicNode = italicNode;
            this.BoldItalicNode = boldItalicNode;
            this.CodeNode = codeNode;
            this.ImageNode = imageNode;
            this.LinkNode = linkNode;
            this.AutoLinkNode = autoLinkNode;
            this.TagNode = tagNode;
            this.StrikethroughNode = strikethroughNode;
            this.EscapingCharacterNode = escapingCharacterNode;
            this.MathNode = mathNode;
            this.HighlightNode = highlightNode;
            this.SubscriptNode = subscriptNode;
            this.SuperscriptNode = superscriptNode;
            this.ReferencedContentNode = referencedContentNode;
            this.SpoilerNode = spoilerNode;
        }

        /// <summary>
        /// Gets or Sets LineBreakNode
        /// </summary>
        [DataMember(Name = "lineBreakNode", EmitDefaultValue = false)]
        public Object LineBreakNode { get; set; }

        /// <summary>
        /// Gets or Sets ParagraphNode
        /// </summary>
        [DataMember(Name = "paragraphNode", EmitDefaultValue = false)]
        public V1ParagraphNode ParagraphNode { get; set; }

        /// <summary>
        /// Gets or Sets CodeBlockNode
        /// </summary>
        [DataMember(Name = "codeBlockNode", EmitDefaultValue = false)]
        public V1CodeBlockNode CodeBlockNode { get; set; }

        /// <summary>
        /// Gets or Sets HeadingNode
        /// </summary>
        [DataMember(Name = "headingNode", EmitDefaultValue = false)]
        public V1HeadingNode HeadingNode { get; set; }

        /// <summary>
        /// Gets or Sets HorizontalRuleNode
        /// </summary>
        [DataMember(Name = "horizontalRuleNode", EmitDefaultValue = false)]
        public V1HorizontalRuleNode HorizontalRuleNode { get; set; }

        /// <summary>
        /// Gets or Sets BlockquoteNode
        /// </summary>
        [DataMember(Name = "blockquoteNode", EmitDefaultValue = false)]
        public V1BlockquoteNode BlockquoteNode { get; set; }

        /// <summary>
        /// Gets or Sets OrderedListNode
        /// </summary>
        [DataMember(Name = "orderedListNode", EmitDefaultValue = false)]
        public V1OrderedListNode OrderedListNode { get; set; }

        /// <summary>
        /// Gets or Sets UnorderedListNode
        /// </summary>
        [DataMember(Name = "unorderedListNode", EmitDefaultValue = false)]
        public V1UnorderedListNode UnorderedListNode { get; set; }

        /// <summary>
        /// Gets or Sets TaskListNode
        /// </summary>
        [DataMember(Name = "taskListNode", EmitDefaultValue = false)]
        public V1TaskListNode TaskListNode { get; set; }

        /// <summary>
        /// Gets or Sets MathBlockNode
        /// </summary>
        [DataMember(Name = "mathBlockNode", EmitDefaultValue = false)]
        public V1MathBlockNode MathBlockNode { get; set; }

        /// <summary>
        /// Gets or Sets TableNode
        /// </summary>
        [DataMember(Name = "tableNode", EmitDefaultValue = false)]
        public V1TableNode TableNode { get; set; }

        /// <summary>
        /// Gets or Sets EmbeddedContentNode
        /// </summary>
        [DataMember(Name = "embeddedContentNode", EmitDefaultValue = false)]
        public V1EmbeddedContentNode EmbeddedContentNode { get; set; }

        /// <summary>
        /// Gets or Sets TextNode
        /// </summary>
        [DataMember(Name = "textNode", EmitDefaultValue = false)]
        public V1TextNode TextNode { get; set; }

        /// <summary>
        /// Gets or Sets BoldNode
        /// </summary>
        [DataMember(Name = "boldNode", EmitDefaultValue = false)]
        public V1BoldNode BoldNode { get; set; }

        /// <summary>
        /// Gets or Sets ItalicNode
        /// </summary>
        [DataMember(Name = "italicNode", EmitDefaultValue = false)]
        public V1ItalicNode ItalicNode { get; set; }

        /// <summary>
        /// Gets or Sets BoldItalicNode
        /// </summary>
        [DataMember(Name = "boldItalicNode", EmitDefaultValue = false)]
        public V1BoldItalicNode BoldItalicNode { get; set; }

        /// <summary>
        /// Gets or Sets CodeNode
        /// </summary>
        [DataMember(Name = "codeNode", EmitDefaultValue = false)]
        public V1CodeNode CodeNode { get; set; }

        /// <summary>
        /// Gets or Sets ImageNode
        /// </summary>
        [DataMember(Name = "imageNode", EmitDefaultValue = false)]
        public V1ImageNode ImageNode { get; set; }

        /// <summary>
        /// Gets or Sets LinkNode
        /// </summary>
        [DataMember(Name = "linkNode", EmitDefaultValue = false)]
        public V1LinkNode LinkNode { get; set; }

        /// <summary>
        /// Gets or Sets AutoLinkNode
        /// </summary>
        [DataMember(Name = "autoLinkNode", EmitDefaultValue = false)]
        public V1AutoLinkNode AutoLinkNode { get; set; }

        /// <summary>
        /// Gets or Sets TagNode
        /// </summary>
        [DataMember(Name = "tagNode", EmitDefaultValue = false)]
        public V1TagNode TagNode { get; set; }

        /// <summary>
        /// Gets or Sets StrikethroughNode
        /// </summary>
        [DataMember(Name = "strikethroughNode", EmitDefaultValue = false)]
        public V1StrikethroughNode StrikethroughNode { get; set; }

        /// <summary>
        /// Gets or Sets EscapingCharacterNode
        /// </summary>
        [DataMember(Name = "escapingCharacterNode", EmitDefaultValue = false)]
        public V1EscapingCharacterNode EscapingCharacterNode { get; set; }

        /// <summary>
        /// Gets or Sets MathNode
        /// </summary>
        [DataMember(Name = "mathNode", EmitDefaultValue = false)]
        public V1MathNode MathNode { get; set; }

        /// <summary>
        /// Gets or Sets HighlightNode
        /// </summary>
        [DataMember(Name = "highlightNode", EmitDefaultValue = false)]
        public V1HighlightNode HighlightNode { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptNode
        /// </summary>
        [DataMember(Name = "subscriptNode", EmitDefaultValue = false)]
        public V1SubscriptNode SubscriptNode { get; set; }

        /// <summary>
        /// Gets or Sets SuperscriptNode
        /// </summary>
        [DataMember(Name = "superscriptNode", EmitDefaultValue = false)]
        public V1SuperscriptNode SuperscriptNode { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedContentNode
        /// </summary>
        [DataMember(Name = "referencedContentNode", EmitDefaultValue = false)]
        public V1ReferencedContentNode ReferencedContentNode { get; set; }

        /// <summary>
        /// Gets or Sets SpoilerNode
        /// </summary>
        [DataMember(Name = "spoilerNode", EmitDefaultValue = false)]
        public V1SpoilerNode SpoilerNode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1Node {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LineBreakNode: ").Append(LineBreakNode).Append("\n");
            sb.Append("  ParagraphNode: ").Append(ParagraphNode).Append("\n");
            sb.Append("  CodeBlockNode: ").Append(CodeBlockNode).Append("\n");
            sb.Append("  HeadingNode: ").Append(HeadingNode).Append("\n");
            sb.Append("  HorizontalRuleNode: ").Append(HorizontalRuleNode).Append("\n");
            sb.Append("  BlockquoteNode: ").Append(BlockquoteNode).Append("\n");
            sb.Append("  OrderedListNode: ").Append(OrderedListNode).Append("\n");
            sb.Append("  UnorderedListNode: ").Append(UnorderedListNode).Append("\n");
            sb.Append("  TaskListNode: ").Append(TaskListNode).Append("\n");
            sb.Append("  MathBlockNode: ").Append(MathBlockNode).Append("\n");
            sb.Append("  TableNode: ").Append(TableNode).Append("\n");
            sb.Append("  EmbeddedContentNode: ").Append(EmbeddedContentNode).Append("\n");
            sb.Append("  TextNode: ").Append(TextNode).Append("\n");
            sb.Append("  BoldNode: ").Append(BoldNode).Append("\n");
            sb.Append("  ItalicNode: ").Append(ItalicNode).Append("\n");
            sb.Append("  BoldItalicNode: ").Append(BoldItalicNode).Append("\n");
            sb.Append("  CodeNode: ").Append(CodeNode).Append("\n");
            sb.Append("  ImageNode: ").Append(ImageNode).Append("\n");
            sb.Append("  LinkNode: ").Append(LinkNode).Append("\n");
            sb.Append("  AutoLinkNode: ").Append(AutoLinkNode).Append("\n");
            sb.Append("  TagNode: ").Append(TagNode).Append("\n");
            sb.Append("  StrikethroughNode: ").Append(StrikethroughNode).Append("\n");
            sb.Append("  EscapingCharacterNode: ").Append(EscapingCharacterNode).Append("\n");
            sb.Append("  MathNode: ").Append(MathNode).Append("\n");
            sb.Append("  HighlightNode: ").Append(HighlightNode).Append("\n");
            sb.Append("  SubscriptNode: ").Append(SubscriptNode).Append("\n");
            sb.Append("  SuperscriptNode: ").Append(SuperscriptNode).Append("\n");
            sb.Append("  ReferencedContentNode: ").Append(ReferencedContentNode).Append("\n");
            sb.Append("  SpoilerNode: ").Append(SpoilerNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
