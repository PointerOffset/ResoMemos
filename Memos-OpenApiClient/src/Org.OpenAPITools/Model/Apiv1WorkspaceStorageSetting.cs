/*
 * api/v1/activity_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Apiv1WorkspaceStorageSetting
    /// </summary>
    [DataContract(Name = "apiv1WorkspaceStorageSetting")]
    public partial class Apiv1WorkspaceStorageSetting : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StorageType
        /// </summary>
        [DataMember(Name = "storageType", EmitDefaultValue = false)]
        public Apiv1WorkspaceStorageSettingStorageType? StorageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Apiv1WorkspaceStorageSetting" /> class.
        /// </summary>
        /// <param name="storageType">storageType.</param>
        /// <param name="filepathTemplate">filepathTemplate.</param>
        /// <param name="uploadSizeLimitMb">The max upload size in megabytes..</param>
        /// <param name="s3Config">s3Config.</param>
        public Apiv1WorkspaceStorageSetting(Apiv1WorkspaceStorageSettingStorageType? storageType = default(Apiv1WorkspaceStorageSettingStorageType?), string filepathTemplate = default(string), string uploadSizeLimitMb = default(string), WorkspaceStorageSettingS3Config s3Config = default(WorkspaceStorageSettingS3Config))
        {
            this.StorageType = storageType;
            this.FilepathTemplate = filepathTemplate;
            this.UploadSizeLimitMb = uploadSizeLimitMb;
            this.S3Config = s3Config;
        }

        /// <summary>
        /// Gets or Sets FilepathTemplate
        /// </summary>
        [DataMember(Name = "filepathTemplate", EmitDefaultValue = false)]
        public string FilepathTemplate { get; set; }

        /// <summary>
        /// The max upload size in megabytes.
        /// </summary>
        /// <value>The max upload size in megabytes.</value>
        [DataMember(Name = "uploadSizeLimitMb", EmitDefaultValue = false)]
        public string UploadSizeLimitMb { get; set; }

        /// <summary>
        /// Gets or Sets S3Config
        /// </summary>
        [DataMember(Name = "s3Config", EmitDefaultValue = false)]
        public WorkspaceStorageSettingS3Config S3Config { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Apiv1WorkspaceStorageSetting {\n");
            sb.Append("  StorageType: ").Append(StorageType).Append("\n");
            sb.Append("  FilepathTemplate: ").Append(FilepathTemplate).Append("\n");
            sb.Append("  UploadSizeLimitMb: ").Append(UploadSizeLimitMb).Append("\n");
            sb.Append("  S3Config: ").Append(S3Config).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
